## Gitea image
## ref: https://hub.docker.com/r/gitea/gitea/tags/
##

images:
  gitea: "gitea/gitea:1.9.3"
  postgres: "postgres:11"
  memcached: "memcached:1.5.19-alpine"
  imagePullPolicy: Always
  ## Specify imagePullSecrets
  ## ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
  ##
  # imagePullSecrets: myregistrykey

## cache settings
memcached:
  maxItemMemory: 64
  verbosity: v
  extendedOptions: modern

ingress:
  ## Set to true to enable ingress record generation
  enabled: true

  ## Set this to true in order to add the corresponding annotations for cert-manager
  certManager: false

  ## When the ingress is enabled, a host pointing to this will be created
  hostname: gitea.local

  ## Ingress annotations done as key:value pairs
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ##
  ## If tls is set to true, annotation ingress.kubernetes.io/secure-backends: "true" will automatically be set
  ## If certManager is set to true, annotation kubernetes.io/tls-acme: "true" will automatically be set
  annotations: {}
  #  kubernetes.io/ingress.class: nginx

  ## The list of additional hostnames to be covered with this ingress record.
  ## Most likely the hostname above will be enough, but in the event more hosts are needed, this is an array
  ## hosts:
  ## - name: gitea.local
  ##   path: /

  ## The tls configuration for the ingress
  ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  ## tls:
  ## - hosts:
  ##     - gitea.local
  ##   secretName: gitea.local-tls

  secrets:
  ## If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate should start with -----BEGIN CERTIFICATE----- or
  ## -----BEGIN RSA PRIVATE KEY-----
  ##
  ## name should line up with a tlsSecret set further up
  ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
  ##
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  # - name: gitea.local-tls
  #   key:
  #   certificate:
  #

## chart defaults to using an ingress for http, but change to LoadBalancer if using you cluster supports it
service:
  http:
    serviceType: ClusterIP
    port: 3000
    #nodePort: 30280
    # sometimes if is necesary to access through an external port i.e. http(s)://<dns-name>:<external-port>
    externalPort: 8280
    externalHost: git.example.com
  ssh:
    serviceType: ClusterIP
    port: 22
    #nodePort: 30222
    ## if serving on a different external port used for determining the ssh url in the gui
    #externalPort: 8022
    #externalHost: git.example.com

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  gitea:
    requests:
      memory: 500Mi
      cpu: 1000m
    limits:
      memory: 2Gi
      cpu: 1
  postgres:
    requests:
      memory: 200Mi
      cpu: 200m
    limits:
      memory: 2Gi
      cpu: 1
  memcached:
    requests:
      memory: 64Mi
      cpu: 50m



## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
## ref:
##
persistence:
  enabled: false
  #existingGiteaClaim: gitea-gitea
  #existingPostgresClaim: gitea-postgres
  giteaSize: 10Gi
  postgresSize: 5Gi
  #storageClass: glusterfs
  accessMode: ReadWriteMany
## addtional annotations for hte pvcs  uncommenting below will prevent helm from deleting the pvc when hte chart is deleted
#  annotations:
#    "helm.sh/resource-policy": keep

## if you want to mount a volume directly without using a storageClass or pvcs
#  directGiteaVolumeMount:
#    glusterfs:
#      endpoints: "192.168.1.1 192.168.1.2 192.168.1.3"
#      path: giteaData
#  directPostgresVolumeMount:
#    glusterfs:
#      endpoints: "192.168.1.1 192.168.1.2 192.168.1.3"
#      path: giteaPostgresData

#Connect to an external database
# externalDB:
#   dbUser: "postgres"
#   dbPassword: "<MY_PASSWORD>"
#   dbHost: "service-name.namespace.svc.cluster.local" # or some external host
#   dbPort: "5432"
#   dbDatabase: "gitea"

# valid types: postgres, mysql, mssql, sqllite
dbType: "postgres"
useInPodPostgres: true

inPodPostgres:
    secret: postgresecrets
    subPath: "postgresql-db"
    dataMountPath: /var/lib/postgresql/data/pgdata

    ## Create a database user
    ## Default: postgres
    # postgresUser:
    ## Default: random 10 character string
    # postgresPassword:

    ## Inject postgresPassword via a volume mount instead of environment variable
    usePasswordFile: false

    ## Use Existing secret instead of creating one
    ## It must have a postgres-password key containing the desired password
    # existingSecret: 'secret'

    ## Create a database
    ## Default: the postgres user
    postgresDatabase: gitea

    ## Specify initdb arguments, e.g. --data-checksums
    ## ref: https://github.com/docker-library/docs/blob/master/postgres/content.md#postgres_initdb_args
    ## ref: https://www.postgresql.org/docs/current/static/app-initdb.html
    # postgresInitdbArgs:

    ## Specify runtime config parameters as a dict, using camelCase, e.g.
    ## {"sharedBuffers": "500MB"}
    ## ref: https://www.postgresql.org/docs/current/static/runtime-config.html
    # postgresConfig:


## Node labels and tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature
nodeSelector: {}
tolerations: []
affinity: {}

## Annotations for the deployment and nodes.
deploymentAnnotations: {}
podAnnotations: {}

## In order to disable initial install screen you must have secretKey and disableInstaller=true
config:
#  secretKey: define_your_secret
  disableInstaller: false
  offlineMode: false
  requireSignin: false
  disableRegistration: false
  openidSignin: true

